'''
>> P
한 행이 2**n인 2차원 배열을 z모양으로 탐색하려고 한다. 
N > 1 인 경우 배열 크기가 2**n-1으로 4등분 한 후 재귀적으로 순서대로 방문한다
N이 주어졌을 때 r행, c열을 몇번째로 방문하는지 출력하는 프로그램 작성

>> S
사분면을 구분하여 N==1이 될 때까지 재귀 호출하며 값 더하기

접근
1사분면 = r, c가 2**(n-1)보다 작을 경우
2사분면 = r이 2**n(n-1)보다 작고 c는 크다
3사분면 = r은 크고 c는 작다
4사분면 = r,c 모두 크다

사분면마다 2**(n-1) * (k-1)분면만큼 값의 차이가 남
ex) N=3 이고 3사분면이면 2**2 * 2**2 * (3-1) = 32부터 시작

N이 1보다 크거나 같으면 
k분면을 찾고 더하면서 r,c를 줄이고 값을 누적한다

코드

while N >= 1:
    N -= 1

    # 1사분면
    if r < 2**N and c < 2**N:
        ans += 2**N * 2**N * 0
        pass

'''

N, r, c = map(int, input().split())

ans = 0

while N >= 1:

    N -= 1

    if r < 2**N and c < 2**N:
        ans += 2**N * 2**N * 0

    elif r < 2**N and c >= 2**N:
        ans += 2**N * 2**N * 1
        c -= 2**N

    elif r >= 2**N and c < 2**N:
        ans += 2**N * 2**N * 2
        r -= 2**N
    else:
        ans += 2**N * 2**N * 3
        r -= 2 ** N
        c -= 2 ** N

print(ans)
