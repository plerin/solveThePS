'''
> P
정수 N을 1,2,3의 합으로 나타내는 바법의 수를 구하라
> S
동적 계획법

이 문제는 1,2,3의 조합으로 N을 만드는 방법의 수(최적의 해)를 찾는 문제인데 단, 같은 수를 두 번이상 사용하면 안 된다.
=> 2차원 배열을 통해 이전 값이 1/2/3인지 구분하여 풀이해야 함
[i][0/1/2] 
    -> [i][0]은 i 값을 만드는 조합의 마지막 값이 1인 경우   == dp[i-1][1] + dp[i-1][2] == i에서 1을 뺀 값을 만드는 조합식 중 마지막 값이 2/3인 경우를 더해주면 됨
    -> [i][1] = i 값을 만드는 조합의 마지막 값이 2인 경우   == dp[i-2][0] + dp[i-2][3] == i에서 2를 뺀 값을 만드는 조합식 중 마지막 값이 1/3인 경우를 더해주면 됨  
    -> [i][2] = i 값을 만드는 조합의 마지막 값이 3인 경우   == dp[i-3][0] + dp[i-3][4] == i에서 3을 뺀 값을 만드는 조합식 중 마지막 값이 1/2/인 경우를 더해주면 됨

이 식의 마지막 값은 10억9를 나눈 나머지 값을 출력해야함
    -> 이 식을 맨 마지막에 나눈다면 그 앞의 연산 값이 너무 커질 수 있기 때문에 나머지 연산 법칙을 사용함
    -> (A+B)%M == ((A%M) + (B%M)) % M 
'''
MAX = 1000001  # 문제의 최대 값 + 1

t = int(input())
n = [int(input()) for _ in range(t)]

# 모든 값에 대해서 3개의 2차 배열을 남긴 이유는 [0] = 마지막이 1, [1] = 마지막이 2, [2] = 마지막이 3인 경우
dp = [[0 for _ in range(3)] for _ in range(MAX)]
dp[1] = [1, 0, 0]   # [1][0] = 1, 나머지는 0 => 1을 만들기 위한 식 중 맨 뒤가 1인건 1가지(0+1)
# [2][1] = 1, => 0+2, 1가지 경우 ,, [2][0] = 0 인 이유는 1+1를 의미하는데 이건 두 값이 연속적으로 중복되기 때문
dp[2] = [0, 1, 0]
dp[3] = [1, 1, 1]   # [3][0] => 2+1 // [3][1]  => 1+2 // [3][2] => 0+3

for i in range(4, MAX):
    dp[i][0] = dp[i-1][1] % 1000000009 + dp[i-1][2] % 1000000009
    dp[i][1] = dp[i-2][0] % 1000000009 + dp[i-2][2] % 1000000009
    dp[i][2] = dp[i-3][0] % 1000000009 + dp[i-3][1] % 1000000009

for i in n:
    print(sum(dp[i]) % 1000000009)
