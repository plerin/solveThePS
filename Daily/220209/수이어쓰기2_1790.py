'''
>> P
1부터 N까지 수를 이어 쓰면 새로운 수를 얻는다
앞에서 k번째 숫자 구하라
    - 수의 길이가 K보다 작은 경우 -1 출력
>> S
1~9 : 1
10~99 : 2
100~999 : 3

N을 통해 길이를 구하고 k와 비교하여 if-else 구문주고
그 다음에 로직으로 풀이해서 결과 출력

23 - 9 -> 14인데 10부터 시작
자리수 개수보다 크면 빼줘 ex) 1의 자리 개수인 9보다 크면 빼
2의 자리수는 총 180개를 갖고있어 10부터 99까지 (99-10+1) * 2 = 180
180보다 큰지 판단해서 작으면 계산 크면 180빼고 3번째 자리수 계산
divmod(val, 20) = 몫, 나머지 
14면 (0, 14) -> 앞의 자리는 1 뒷 자리는 1~9인데 홀수 -> 1 , 짝수 -> 0~9 ,, 14/2 -> 7이니까 6!

1자리 -> 1~9 -> (9-1+1)*1 = 9*1 = 9개
2자리 -> 10~99 -> (99-10+1)*2 = 90*2 = 180개
3자리 -> 100~999 -> (999-100+1)*3 = 900*3 = 2700개
n자리 -> 9 * 10^(n-1) * n 보다 큰지 확인 

321구한다
1자리보다 커 -> 321 -9 = 312
2자리보다 커 -> 312 - 180 = 132
3자리보다 작아 -> 132으로 계산시작 -> 


규칙 찾았어!
1. N에 따른 자리 수 구하기
    -> n >= 9 * 10**(n-1) * n 
2. -1 출력 여부 if-else문으로 판단
3. 해당 값을 자리수의 개수만큼 빼가면서(n자리 개수보다 크면 빼고 다시 반복 작으면 그 때서야 계산)
    - 계산 수식
    %n => 몫 -> n자리수 번째 값 // 나머지 -> (n-1) : n자리수, 0 : 일의자리수
'''

n, k = map(int, input().split())
# 초기값 셋팅
ans = 0
digit = 1
nine = 9

# 구해야할 자리 수가 9, 90, 900 ..보다 큰 경우
while k > digit*nine:
    k -= (digit*nine)
    # ans에 이전 자리수의 최대 값을 더해준다
    ans += nine
    digit += 1
    nine *= 10

print(ans)
# k를 지금까지 세어온 자리수만큼 나눈뒤 ans에 더해준다
ans = (ans+1) + (k-1) // digit
# print((k-1) % digit)
if ans > n:
    print(-1)
else:
    print(str(ans)[(k-1) % digit])
